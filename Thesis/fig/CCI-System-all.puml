@startuml C4_Elements
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include FONTAWESOME/users.puml
!include FONTAWESOME/building.puml
!include FONTAWESOME/exchange_alt.puml
!include FONTAWESOME/terminal.puml
!include FONTAWESOME/chrome.puml
!include FONTAWESOME/php.puml
!include FONTAWESOME/laptop.puml
!include DEVICONS/nodejs.puml
!include DEVICONS/mysql.puml
!include DEVICONS/nginx.puml
!include DEVICONS/javascript.puml
!include DEVICONS2/vuejs.puml
!include DEVICONS2/ssh_original_wordmark.puml
!include DEVICONS2/mongodb.puml

title CCI-DM-CU-System
LAYOUT_WITH_LEGEND()
' LAYOUT_AS_SKETCH()
' LAYOUT_LEFT_RIGHT()


' External
System_Ext(device, "Device", ,$sprite="laptop")
Person_Ext(user, "Users", ,$sprite="users")
System_Ext(cu, "DM-CU", ,$sprite="building")
Lay_U(frontend, user)
Lay_U(cu, microTLS)


' Frontend
Container_Boundary(frontend, "WebFrontend") {
    Component(web_app, "dm-cu-webapp", "VUE", "Allows users to view and manage devices", $sprite="vuejs")
    Component(portal_app, "portal-webapp", "VUE","Main Dashboard. Redirects to other Services", $sprite="vuejs")
}

' SSH
Container_Boundary(remote_ssh, "Remote Access System") {
    Component(remoteaccess_sshgateway, "SSH-JumpHost", "OpenSSH","SSH-JumpHost. Creates a Reverse SSH-Tunnel. Iniziated by device", $sprite="ssh_original_wordmark")
    Component(web_ssh, "WebSockify", "JS", "Interface for SSH over a reverse SSH-Tunnel", $sprite="nodejs")
}

' MQTT
Container_Boundary(mqtt_cluster, "MQTT Service Cluster") {
    Component(mqtt_broker, "MQTT Broker", "mosquitto", "MQTT Message Point for Devices Connector", $sprite="exchange_alt")
    Component(mqtt_con, "MQTT Connector", "JS", "Provides a http API for other services to send/reseive MQTT massenges", $sprite="nodejs")
}

' DBs
System_Boundary(db, "Persistant Data Layer") {
    ContainerDb(db_user, "User Database", "MySQL", "Holds user information", $sprite="mysql")
    ContainerDb(db_device, "Device Database", "MySQL", "Holds device information", $sprite="mysql")
    ContainerDb(db_log, "Log Database", "MongoDB", "Holds device and service Logs", $sprite="mongodb")
}

' APIs
System_Boundary(microTLS, "Microservice Cluster Outer"){
    Component(api_gateway, " API Gateway", "nginx", "Terminates TLS", $sprite="nginx")
    Container_Boundary(micro, "Microservice Cluster") {
        Component(system_api, "dm-cu-system-api", "JS", "Helper API between services. E.g. encryption Keys", $sprite="nodejs")
        Component(device_api, "dm-cu-device-api", "JS", "Provides a API for the device to set status, software, config download", $sprite="nodejs")
        Component(company_api, "dm-cu-company-api", "JS", "Manages API calls from various frontends and gets Data form the Device DB", $sprite="nodejs")
        Component(manu_api, "dm-cu-manufacturer-api ", "JS", "Allows Manufacturers to create new Devices entries in the DB", $sprite="nodejs")
        Component(terminals_company, "dm-terminals-company-api", "PHP", "Authentification Backend-Service, Configuration-Data store", $sprite="php")
    }
}

Lay_R(terminals_company, device_api)
Lay_L(company_api, device_api)
Lay_L(portal_app, mqtt_broker)

Rel(user, frontend, "Interact with", "https")
Rel_R(portal_app, web_app, "Redirects to DeviceManagment", "https")
Rel(frontend, terminals_company, "Validates Authentification", "https")

BiRel_L(remote_ssh, web_app , "WebSSH Terminal", "SecureWebSocket")
Rel_R(web_ssh, remoteaccess_sshgateway , "Forwards SSH to", "SSH")
Rel(remote_ssh,system_api , "Validation and AccessToken via", "https")
Rel_R(frontend, company_api , "Gets DeviceDetails via", "https")
BiRel(remoteaccess_sshgateway, device , "Reverse SSH-Tunnel", "SSH")
Rel_U(device, device_api , "Gets Software and Configs from", "mTLS")
BiRel(mqtt_broker, device , "Publish and subbscribe Massages", "MQTT")
Rel_R(mqtt_con,mqtt_broker , "Push API messages to", "MQTT")
Rel(micro,db_device , "Looks up", "DB")
Rel(system_api, mqtt_con , "Aggragates all messanges for the", "https")
Rel_D(terminals_company,db_user , "Looks up", "ZendDB")
Rel_R(micro,db_log , "Looks up", "ZendDB")
Rel_L(cu, manu_api , "Sets device informations", "https")

' Start a Pantuml render server
' docker run -d -p 8888:8080 plantuml/plantuml-server:jetty

@enduml